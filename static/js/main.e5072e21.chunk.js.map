{"version":3,"sources":["components/Card/cat-pattern.png","components/Card/Card.jsx","components/GameStart/GameStart.jsx","components/Scoreboard/Scoreboard.jsx","App.js","utils.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","catImage","catName","cardClickHandler","catIndex","flipped","react_default","a","createElement","className","onClick","react","class","src","cardBack","GameStart","resetGame","score","Scoreboard","App","_useState","useState","_useState2","Object","slicedToArray","selectedCount","setSelectedCount","_useState3","_useState4","blockClicks","setBlockClicks","_useState5","_useState6","cats","setCats","_useState7","_useState8","setScore","unmatchedCatCount","filter","cat","matched","length","updatedCount","updatedCats","map","index","objectSpread","selected","console","log","selectedCats","setTimeout","catsArray","concat","sort","Math","random","components_Scoreboard_Scoreboard","components_Card_Card","key","components_GameStart_GameStart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w5CAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uRC+BzBC,SAzBF,SAAAC,GAA8D,IAA5DC,EAA4DD,EAA5DC,SAAUC,EAAkDF,EAAlDE,QAASC,EAAyCH,EAAzCG,iBAAkBC,EAAuBJ,EAAvBI,SAAUC,EAAaL,EAAbK,QAW1D,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QART,WACRL,GAEDF,EAAiBC,KAMhBC,EACGC,EAAAC,EAAAC,cAACG,EAAA,SAAD,CAAUC,MAAM,aACZN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcI,IAAKZ,IAClCK,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcP,IAG/BI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcI,IAAKC,SCHnCC,SAlBG,SAAAf,GAAwB,IAAtBgB,EAAsBhB,EAAtBgB,UAAWC,EAAWjB,EAAXiB,MAC3B,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVQ,EACDX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,0BAAkBS,IAGlBX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,qDAEJF,EAAAC,EAAAC,cAAA,UAAQE,QAASM,GAAjB,SAAmCC,GAAS,aCJzCC,SATI,SAAAlB,GAAa,IAAXiB,EAAWjB,EAAXiB,MACjB,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,oBAAYS,aC2FTE,SA1FH,WAAM,IAAAC,EAC0BC,mBAAS,GADnCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACMI,EADNJ,EAAA,GAAAK,EAEsBN,oBAAS,GAF/BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETE,EAFSD,EAAA,GAEIE,EAFJF,EAAA,GAAAG,EAGQV,mBAAS,IAHjBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGTE,EAHSD,EAAA,GAGHE,EAHGF,EAAA,GAAAG,EAIUd,mBAAS,GAJnBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAITlB,EAJSmB,EAAA,GAIFC,EAJED,EAAA,GAMVE,EAAoBL,EAAKM,OAAO,SAAAC,GAAG,OAAKA,EAAIC,UAASC,OAErDvC,EAAmB,SAACC,GACxB,IAAIyB,EAAJ,CACA,IAAIc,EAAelB,EAAgB,EACnCC,EAAiBiB,GACjB,IAAIC,EAAcX,EAAKY,IAAI,SAACL,EAAKM,GAAN,OAAgB1C,IAAa0C,EAAbvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAyBiB,EAAzB,CAA8BQ,UAAU,IAAQR,IAM3F,GALAN,EAAQU,GACRK,QAAQC,IAAI,4BAA6BN,GAIpB,IAAjBD,EAAoB,CAEtB,IAAMQ,EAAeP,EAAYL,OAAO,SAAAC,GAAG,OAAIA,EAAIQ,WACnDC,QAAQC,IAAI,0BAA2BC,GAGnCA,EAAa,GAAGjD,UAAYiD,EAAa,GAAGjD,SAC9C+C,QAAQC,IAAI,uBAEZN,EAAcA,EAAYC,IAAI,SAAAL,GAAG,OAAIA,EAAIQ,SAAJzB,OAAAwB,EAAA,EAAAxB,CAAA,GAAmBiB,EAAnB,CAAwBQ,UAAU,EAAOP,SAAS,IAAQD,IAC/FG,EAAe,EACfM,QAAQC,IAAI,2BAA4BN,GACxCV,EAAQU,GACRlB,EAAiBiB,GACjBN,EAASpB,EAAQ,MAIjBa,GAAe,GACfO,EAASpB,EAAQ,IACjBmC,WAAW,WACTtB,GAAe,GACfc,EAAcA,EAAYC,IAAI,SAAAL,GAAG,OAAIA,EAAIQ,SAAJzB,OAAAwB,EAAA,EAAAxB,CAAA,GAAmBiB,EAAnB,CAAwBQ,UAAU,IAASR,IAChFG,EAAe,EACfT,EAAQU,GACRlB,EAAiBiB,IAChB,SAKH3B,EAAY,WAChBqB,EAAS,GACTX,EAAiB,GACjBQ,EClDmBmB,EAAUC,OAAOD,GACnBE,KAAK,iBAAM,GAAMC,KAAKC,YDkDvC3B,GAAe,IAGjB,OAAKQ,EAUHhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACkD,EAAD,CACEzC,MAAOA,IAETX,EAAAC,EAAAC,cAAA,UAAQE,QAASM,GAAjB,eAEFV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACZwB,EAAKY,IAAI,SAACL,EAAKM,GAAN,OACRxC,EAAAC,EAAAC,cAACmD,EAAD,CACEzD,QAASsC,EAAItC,QACbD,SAAUuC,EAAIvC,SACdI,QAASmC,EAAIQ,UAAYR,EAAIC,QAC7BtC,iBAAkBA,EAClBC,SAAU0C,EACVc,IAAKd,QAxBXxC,EAAAC,EAAAC,cAACqD,EAAD,CACE5C,MAAOA,EACPD,UAAWA,MEzDC8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e5072e21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat-pattern.f6cc3aa1.png\";","import React, {useState, Fragment} from \"react\";\r\n\r\nimport cardBack from \"./cat-pattern.png\"\r\n\r\nimport './Card.scss'\r\n\r\nconst Card = ({catImage, catName, cardClickHandler, catIndex, flipped}) => {\r\n    // State and state set function. useState is a function that gets passed an initial value and returns an array of the state (flipped) and a function to update the state (setFlipped)\r\n    // const [flipped, setFlipped] = useState(false)\r\n    // Only flip cards face up, not face down\r\n    const flipCard = () => {\r\n        if (!flipped) {\r\n            // setFlipped(true)\r\n            cardClickHandler(catIndex)\r\n        }\r\n        // TODO: Add else statement warning for already been clicked\r\n    }\r\n    return (\r\n        <div className=\"Card\" onClick={flipCard}>\r\n            {flipped ? (\r\n                <Fragment class=\"Card__box\">\r\n                    <img className=\"Card__image\" src={catImage} />\r\n                    <p className=\"Card__name\">{catName}</p>\r\n                </Fragment>\r\n            ) : (\r\n                <img className=\"Card__image\" src={cardBack} />                    \r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from \"react\"\r\n\r\nimport './GameStart.scss'\r\n\r\nconst GameStart = ({resetGame, score}) => {\r\n    return (\r\n        <div className=\"EndScreen\">\r\n            {score ? \r\n            <div>\r\n            <h1>CONGRATULATIONS!! You won!</h1>\r\n            <h2>Final Score: {score}</h2>\r\n            </div>\r\n            : \r\n            <div>\r\n                <h1>Kitten Matching Game</h1>\r\n                <h2>A feline friendly game made with React</h2>\r\n            </div>}\r\n            <button onClick={resetGame}>Play{!!score && \" Again\"}</button> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameStart","import React from \"react\"\r\n\r\nimport './Scoreboard.scss'\r\n\r\nconst Scoreboard = ({score}) => {\r\n    return (\r\n        <div className=\"Scoreboard\">\r\n            <h2>Flip the cards to match the cats</h2>\r\n            <h3>Score: {score}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard   ","import React, {useState} from 'react'\n\nimport Card from \"./components/Card/Card\"\nimport GameStart from \"./components/GameStart/GameStart\"\nimport Scoreboard from \"./components/Scoreboard/Scoreboard\"\nimport {doubleShuffle} from \"./utils\"\n\nimport './App.scss'\n\nconst App = () => {\n  const [selectedCount, setSelectedCount] = useState(0)\n  const [blockClicks, setBlockClicks] = useState(false)\n  const [cats, setCats] = useState([])\n  const [score, setScore] = useState(0)\n\n  const unmatchedCatCount = cats.filter(cat => !cat.matched).length\n\n  const cardClickHandler = (catIndex) => {\n    if (blockClicks) return\n    let updatedCount = selectedCount + 1\n    setSelectedCount(updatedCount)\n    let updatedCats = cats.map((cat, index) => catIndex === index ? {...cat, selected: true} : cat)\n    setCats(updatedCats)\n    console.log(\"updated cats at beginning\", updatedCats)\n    // Update the cats array\n    // ... is a spread function, it adds everything that it had before back into the object. \n    // Then, we update only flipped. Because if you redefine something that's already there, it overwrites it.\n    if (updatedCount === 2) {\n      // Make a new array that only has the flipped cats\n      const selectedCats = updatedCats.filter(cat => cat.selected)\n      console.log(\"flipped cats ppleaseeee\", selectedCats)\n\n      // If it's a match:\n      if (selectedCats[0].catName === selectedCats[1].catName) {\n        console.log(\"WE HAVE A MATCH!!!!\")\n        // Set matched to true for the selected cats\n        updatedCats = updatedCats.map(cat => cat.selected ? {...cat, selected: false, matched: true} : cat)\n        updatedCount = 0\n        console.log(\"updated cats after match\", updatedCats)\n        setCats(updatedCats)\n        setSelectedCount(updatedCount)\n        setScore(score + 20)\n\n      // If it's not a match:\n      } else {\n        setBlockClicks(true)\n        setScore(score - 10)\n        setTimeout(() => {\n          setBlockClicks(false)\n          updatedCats = updatedCats.map(cat => cat.selected ? {...cat, selected: false} : cat)\n          updatedCount = 0\n          setCats(updatedCats)\n          setSelectedCount(updatedCount)\n        }, 2000)\n      }\n    } \n  }\n\n  const resetGame = () => {\n    setScore(0)\n    setSelectedCount(0)\n    setCats(doubleShuffle())\n    setBlockClicks(false)\n  }\n\n  if (!unmatchedCatCount) {\n    return (\n      <GameStart\n        score={score}\n        resetGame={resetGame}\n      />\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__header\">\n        <h1>Kitten Matching Game</h1>\n        <Scoreboard\n          score={score} \n        />\n        <button onClick={resetGame}>Reset Game</button>\n      </div>\n      <div className=\"App__card-container\">\n        {cats.map((cat, index) => (\n          <Card \n            catName={cat.catName}\n            catImage={cat.catImage}\n            flipped={cat.selected || cat.matched}\n            cardClickHandler={cardClickHandler}\n            catIndex={index}\n            key={index}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n// TODO: put image captions on cards\n//\n// Easy/Medium/Hard levels based on how many images are chosen at random from the array to be in the game.\n\n// Future improvements:\n// - Difficulty levels\n// - Timer\n// - Printable certificate for winning","import catsArray from \"./cats.json\"\r\n\r\n\r\n// let easyLayout = 9\r\n// export const easyShuffle = array => {\r\n//     array.length = easyLayout\r\n//     return array.sort(() => 0.5 - Math.random())\r\n// }\r\n\r\n// Doubles the array to create matches and randomizes the order of display\r\nexport const doubleShuffle = array => {\r\n   const doubleCats = (catsArray.concat(catsArray))\r\n   return doubleCats.sort(() => 0.5 - Math.random())\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}